# Generated by Django 5.2.7 on 2025-10-28 16:39

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('brand_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(max_length=140, unique=True)),
                ('names', models.JSONField(blank=True, default=dict)),
                ('descriptions', models.JSONField(blank=True, default=dict)),
                ('country', models.CharField(blank=True, max_length=2)),
                ('founded_year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('icon_url', models.URLField(blank=True)),
                ('official_site_url', models.URLField(blank=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('discontinued', 'Discontinued'), ('hiatus', 'Hiatus')], default='active', max_length=20)),
            ],
            options={
                'db_table': 'brand_brand',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120, unique=True)),
                ('description', models.TextField(blank=True)),
                ('is_gendered', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'catalog_category',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=3, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=80)),
                ('symbol', models.CharField(blank=True, max_length=8)),
                ('decimal_places', models.PositiveSmallIntegerField(default=2)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'core_currency',
                'ordering': ['code'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Fabric',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('fabric_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'catalog_fabric',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('feature_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120, unique=True)),
                ('description', models.TextField(blank=True)),
                ('synonyms', models.JSONField(blank=True, default=list)),
                ('category', models.CharField(choices=[('construction', 'Construction'), ('accessory', 'Accessory'), ('trim', 'Trim'), ('attachment', 'Attachment')], default='construction', max_length=20)),
                ('is_visible', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'catalog_feature',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IngestionSource',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('source_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, unique=True)),
                ('slug', models.SlugField(max_length=140, unique=True)),
                ('description', models.TextField(blank=True)),
                ('url', models.URLField(blank=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'ops_ingestion_source',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('code', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('english_name', models.CharField(max_length=120)),
                ('native_name', models.CharField(blank=True, max_length=120)),
                ('display_order', models.PositiveSmallIntegerField(default=0)),
                ('is_supported', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'core_language',
                'ordering': ['display_order', 'code'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PriceSyncRun',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('run_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('started_at', models.DateTimeField()),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('success', 'Success'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('records_processed', models.PositiveIntegerField(default=0)),
                ('error_summary', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'ops_price_sync_run',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SearchIndexQueue',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('queue_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('entity_type', models.CharField(max_length=120)),
                ('entity_id', models.UUIDField()),
                ('priority', models.PositiveSmallIntegerField(default=0)),
                ('attempts', models.PositiveSmallIntegerField(default=0)),
                ('last_attempt_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ops_search_index_queue',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AuditLog',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('log_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=120)),
                ('target_type', models.CharField(max_length=120)),
                ('target_id', models.UUIDField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('actor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='audit_logs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ops_audit_log',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('collection_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('season', models.CharField(blank=True, max_length=20)),
                ('year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections', to='jiraibrary_server.brand')),
            ],
            options={
                'db_table': 'brand_collection',
                'abstract': False,
                'unique_together': {('brand', 'name', 'year')},
            },
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('color_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=80)),
                ('hex_code', models.CharField(max_length=7)),
                ('lch_values', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'db_table': 'catalog_color',
                'abstract': False,
                'unique_together': {('name', 'hex_code')},
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('image_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('storage_path', models.CharField(max_length=500)),
                ('type', models.CharField(choices=[('cover', 'Cover'), ('gallery', 'Gallery'), ('detail', 'Detail'), ('brand_logo', 'Brand Logo'), ('lookbook', 'Lookbook')], max_length=20)),
                ('caption', models.TextField(blank=True)),
                ('is_cover', models.BooleanField(default=False)),
                ('width', models.PositiveIntegerField(blank=True, null=True)),
                ('height', models.PositiveIntegerField(blank=True, null=True)),
                ('file_size_bytes', models.PositiveIntegerField(blank=True, null=True)),
                ('hash_signature', models.CharField(blank=True, max_length=64)),
                ('dominant_color', models.CharField(blank=True, max_length=7)),
                ('source', models.CharField(choices=[('official', 'Official'), ('user_upload', 'User Upload'), ('ai_generated', 'AI Generated')], max_length=20)),
                ('license', models.CharField(blank=True, max_length=200)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='jiraibrary_server.brand')),
            ],
            options={
                'db_table': 'media_image',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssetAttribution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('credit_text', models.CharField(max_length=255)),
                ('source_url', models.URLField(blank=True)),
                ('notes', models.TextField(blank=True)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributions', to='jiraibrary_server.image')),
            ],
            options={
                'db_table': 'media_asset_attribution',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ImageEmbedding',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vector', models.JSONField(blank=True, default=list)),
                ('algorithm', models.CharField(max_length=120)),
                ('image', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='embedding', to='jiraibrary_server.image')),
            ],
            options={
                'db_table': 'media_image_embedding',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IngestionJob',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('job_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('run_at', models.DateTimeField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('success', 'Success'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('records_ingested', models.PositiveIntegerField(default=0)),
                ('error_payload', models.JSONField(blank=True, default=dict)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='jiraibrary_server.ingestionsource')),
            ],
            options={
                'db_table': 'ops_ingestion_job',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('item_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('slug', models.SlugField(max_length=200)),
                ('origin_country', models.CharField(blank=True, max_length=2)),
                ('release_year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('collaboration', models.CharField(blank=True, max_length=255)),
                ('limited_edition', models.BooleanField(default=False)),
                ('has_matching_set', models.BooleanField(default=False)),
                ('verified_source', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending_review', 'Pending Review'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=20)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('extra_metadata', models.JSONField(blank=True, default=dict)),
                ('brand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='items', to='jiraibrary_server.brand')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='items', to='jiraibrary_server.category')),
                ('default_currency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='items_default_currency', to='jiraibrary_server.currency')),
                ('submitted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submitted_items', to=settings.AUTH_USER_MODEL)),
                ('default_language', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='items_default_language', to='jiraibrary_server.language')),
            ],
            options={
                'db_table': 'catalog_item',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='image',
            name='item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='jiraibrary_server.item'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('comment_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('body', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('published', 'Published'), ('hidden', 'Hidden')], default='pending', max_length=20)),
                ('parent_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='jiraibrary_server.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='jiraibrary_server.item')),
            ],
            options={
                'db_table': 'social_comment',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemMetadata',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('metadata_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('pattern', models.CharField(blank=True, max_length=120)),
                ('sleeve_type', models.CharField(blank=True, max_length=120)),
                ('occasion', models.CharField(blank=True, max_length=120)),
                ('season', models.CharField(blank=True, max_length=120)),
                ('fit', models.CharField(blank=True, max_length=120)),
                ('length', models.CharField(blank=True, max_length=120)),
                ('lining', models.CharField(blank=True, max_length=120)),
                ('closure_type', models.CharField(blank=True, max_length=120)),
                ('care_instructions', models.TextField(blank=True)),
                ('inspiration', models.TextField(blank=True)),
                ('ai_confidence', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='metadata', to='jiraibrary_server.item')),
            ],
            options={
                'db_table': 'catalog_item_metadata',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemVariant',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('variant_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('variant_label', models.CharField(max_length=200)),
                ('sku', models.CharField(blank=True, max_length=120)),
                ('size_descriptor', models.CharField(blank=True, max_length=100)),
                ('stock_status', models.CharField(choices=[('available', 'Available'), ('limited', 'Limited'), ('sold_out', 'Sold Out'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('notes', models.JSONField(blank=True, default=dict)),
                ('color', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='variants', to='jiraibrary_server.color')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variants', to='jiraibrary_server.item')),
            ],
            options={
                'db_table': 'catalog_item_variant',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemMeasurement',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('measurement_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('is_one_size', models.BooleanField(default=False)),
                ('bust_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('waist_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('hip_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('length_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('sleeve_length_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('hem_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('heel_height_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('bag_depth_cm', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
                ('fit_notes', models.TextField(blank=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='jiraibrary_server.item')),
                ('variant', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='measurements', to='jiraibrary_server.itemvariant')),
            ],
            options={
                'db_table': 'catalog_item_measurement',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='image',
            name='variant',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='images', to='jiraibrary_server.itemvariant'),
        ),
        migrations.CreateModel(
            name='ImageLabel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dialect', models.CharField(blank=True, max_length=10)),
                ('text', models.TextField()),
                ('source', models.CharField(choices=[('official', 'Official'), ('ai', 'AI'), ('user', 'User')], max_length=20)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='labels', to='jiraibrary_server.image')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='image_labels', to='jiraibrary_server.language')),
            ],
            options={
                'db_table': 'media_image_label',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ModerationQueue',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('queue_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('entity_type', models.CharField(max_length=120)),
                ('entity_id', models.UUIDField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_review', 'In Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('priority', models.PositiveSmallIntegerField(default=0)),
                ('notes', models.TextField(blank=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderation_assignments', to=settings.AUTH_USER_MODEL)),
                ('submitted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderation_submissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ops_moderation_queue',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ModerationAction',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('action_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(choices=[('approve', 'Approve'), ('reject', 'Reject'), ('request_changes', 'Request Changes')], max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('actor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderation_actions', to=settings.AUTH_USER_MODEL)),
                ('queue_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actions', to='jiraibrary_server.moderationqueue')),
            ],
            options={
                'db_table': 'ops_moderation_action',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('notification_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(max_length=120)),
                ('payload', models.JSONField(blank=True, default=dict)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ops_notification',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutfitSet',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('set_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('visibility', models.CharField(choices=[('private', 'Private'), ('unlisted', 'Unlisted'), ('public', 'Public')], default='private', max_length=20)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outfit_sets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'social_outfit_set',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OutfitSetItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('position', models.PositiveSmallIntegerField(default=0)),
                ('styling_notes', models.JSONField(blank=True, default=dict)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outfit_items', to='jiraibrary_server.item')),
                ('set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='jiraibrary_server.outfitset')),
            ],
            options={
                'db_table': 'social_outfit_set_item',
                'ordering': ['position'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('review_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('rating', models.PositiveSmallIntegerField()),
                ('title', models.CharField(blank=True, max_length=200)),
                ('body', models.TextField()),
                ('is_verified_purchase', models.BooleanField(default=False)),
                ('date_submitted', models.DateTimeField(auto_now_add=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='jiraibrary_server.item')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'social_review',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SecurityConsent',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('consent_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('consent_type', models.CharField(choices=[('data_collection', 'Data Collection'), ('email_marketing', 'Email Marketing'), ('ai_processing', 'AI Processing')], max_length=40)),
                ('date_given', models.DateTimeField()),
                ('change_description', models.TextField(blank=True)),
                ('change_timestamp', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='consents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ops_security_consent',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Subcategory',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('subcategory_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='jiraibrary_server.category')),
            ],
            options={
                'db_table': 'catalog_subcategory',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Substyle',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('substyle_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120, unique=True)),
                ('description', models.TextField(blank=True)),
                ('parent_substyle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='jiraibrary_server.substyle')),
            ],
            options={
                'db_table': 'catalog_substyle',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ItemSubstyle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_substyles', to='jiraibrary_server.item')),
                ('substyle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='substyle_items', to='jiraibrary_server.substyle')),
            ],
            options={
                'db_table': 'catalog_item_substyle',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BrandSubstyle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='brand_substyles', to='jiraibrary_server.brand')),
                ('substyle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='substyle_brands', to='jiraibrary_server.substyle')),
            ],
            options={
                'db_table': 'brand_brand_substyle',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tag_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=120)),
                ('description', models.TextField(blank=True)),
                ('type', models.CharField(choices=[('style', 'Style'), ('detail', 'Detail'), ('material', 'Material'), ('motif', 'Motif'), ('construction', 'Construction')], max_length=20)),
                ('is_featured', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'catalog_tag',
                'abstract': False,
                'unique_together': {('name', 'type')},
            },
        ),
        migrations.CreateModel(
            name='ItemTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('context', models.CharField(blank=True, max_length=20)),
                ('confidence', models.DecimalField(blank=True, decimal_places=2, max_digits=4, null=True)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_tags', to='jiraibrary_server.item')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_items', to='jiraibrary_server.tag')),
            ],
            options={
                'db_table': 'catalog_item_tag',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TagTranslation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('localized_name', models.CharField(max_length=120)),
                ('localized_description', models.TextField(blank=True)),
                ('source', models.CharField(choices=[('official', 'Official'), ('ai', 'AI'), ('user', 'User')], max_length=20)),
                ('quality', models.CharField(choices=[('draft', 'Draft'), ('verified', 'Verified')], default='draft', max_length=20)),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tag_translations', to='jiraibrary_server.language')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='jiraibrary_server.tag')),
            ],
            options={
                'db_table': 'catalog_tag_translation',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserActivity',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('activity_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(max_length=120)),
                ('target_type', models.CharField(blank=True, max_length=120)),
                ('target_id', models.UUIDField(blank=True, null=True)),
                ('payload', models.JSONField(blank=True, default=dict)),
                ('occurred_at', models.DateTimeField(auto_now_add=True)),
                ('actor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='activities', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ops_user_activity',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserFollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('followed', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to=settings.AUTH_USER_MODEL)),
                ('follower', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'social_user_follow',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('bio', models.TextField(blank=True)),
                ('pronouns', models.CharField(blank=True, max_length=60)),
                ('location', models.CharField(blank=True, max_length=120)),
                ('profile_picture', models.URLField(blank=True)),
                ('preferred_languages', models.ManyToManyField(blank=True, related_name='profiles', to='jiraibrary_server.language')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'account_user_profile',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BrandLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('link_type', models.CharField(choices=[('website', 'Website'), ('shop', 'Shop'), ('social', 'Social'), ('other', 'Other')], default='other', max_length=20)),
                ('url', models.URLField()),
                ('is_primary', models.BooleanField(default=False)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='jiraibrary_server.brand')),
            ],
            options={
                'db_table': 'brand_link',
                'abstract': False,
                'unique_together': {('brand', 'link_type', 'url')},
            },
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to='jiraibrary_server.item')),
            ],
            options={
                'db_table': 'social_favorite',
                'abstract': False,
                'unique_together': {('user', 'item')},
            },
        ),
        migrations.CreateModel(
            name='AnalyticsSnapshot',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('snapshot_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('recorded_at', models.DateField()),
                ('views', models.PositiveIntegerField(default=0)),
                ('likes', models.PositiveIntegerField(default=0)),
                ('shares', models.PositiveIntegerField(default=0)),
                ('popularity_score', models.DecimalField(decimal_places=2, default=0, max_digits=6)),
                ('source', models.CharField(blank=True, max_length=120)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics', to='jiraibrary_server.item')),
            ],
            options={
                'db_table': 'analytics_snapshot',
                'abstract': False,
                'unique_together': {('item', 'recorded_at', 'source')},
            },
        ),
        migrations.CreateModel(
            name='ItemCollection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('role', models.CharField(blank=True, max_length=30)),
                ('collection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collection_items', to='jiraibrary_server.collection')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_collections', to='jiraibrary_server.item')),
            ],
            options={
                'db_table': 'catalog_item_collection',
                'abstract': False,
                'unique_together': {('item', 'collection')},
            },
        ),
        migrations.CreateModel(
            name='ItemColor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='color_items', to='jiraibrary_server.color')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_colors', to='jiraibrary_server.item')),
            ],
            options={
                'db_table': 'catalog_item_color',
                'abstract': False,
                'unique_together': {('item', 'color')},
            },
        ),
        migrations.CreateModel(
            name='ItemFabric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('fabric', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fabric_items', to='jiraibrary_server.fabric')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_fabrics', to='jiraibrary_server.item')),
            ],
            options={
                'db_table': 'catalog_item_fabric',
                'abstract': False,
                'unique_together': {('item', 'fabric')},
            },
        ),
        migrations.CreateModel(
            name='ItemFeature',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_prominent', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True)),
                ('feature', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='feature_items', to='jiraibrary_server.feature')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_features', to='jiraibrary_server.item')),
            ],
            options={
                'db_table': 'catalog_item_feature',
                'abstract': False,
                'unique_together': {('item', 'feature')},
            },
        ),
        migrations.CreateModel(
            name='ItemPrice',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('price_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('source', models.CharField(choices=[('origin', 'Origin'), ('converted', 'Converted'), ('manual', 'Manual')], max_length=20)),
                ('rate_used', models.DecimalField(blank=True, decimal_places=6, max_digits=12, null=True)),
                ('valid_from', models.DateField(blank=True, null=True)),
                ('valid_to', models.DateField(blank=True, null=True)),
                ('last_synced_at', models.DateTimeField(blank=True, null=True)),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_prices', to='jiraibrary_server.currency')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='jiraibrary_server.item')),
            ],
            options={
                'db_table': 'catalog_item_price',
                'abstract': False,
                'unique_together': {('item', 'currency', 'source')},
            },
        ),
        migrations.CreateModel(
            name='ItemTranslation',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('translation_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dialect', models.CharField(blank=True, max_length=10)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('pattern', models.CharField(blank=True, max_length=120)),
                ('fit', models.CharField(blank=True, max_length=120)),
                ('length', models.CharField(blank=True, max_length=120)),
                ('occasion', models.CharField(blank=True, max_length=120)),
                ('season', models.CharField(blank=True, max_length=120)),
                ('lining', models.CharField(blank=True, max_length=120)),
                ('closure_type', models.CharField(blank=True, max_length=120)),
                ('care_instructions', models.TextField(blank=True)),
                ('source', models.CharField(choices=[('official', 'Official'), ('ai', 'AI'), ('user', 'User')], max_length=20)),
                ('quality', models.CharField(choices=[('draft', 'Draft'), ('verified', 'Verified')], default='draft', max_length=20)),
                ('auto_translated', models.BooleanField(default=False)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='translations', to='jiraibrary_server.item')),
                ('language', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='item_translations', to='jiraibrary_server.language')),
            ],
            options={
                'db_table': 'catalog_item_translation',
                'abstract': False,
                'unique_together': {('item', 'language', 'dialect')},
            },
        ),
        migrations.AddIndex(
            model_name='item',
            index=models.Index(fields=['brand', 'release_year'], name='item_brand_year_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='item',
            unique_together={('brand', 'slug')},
        ),
        migrations.AlterUniqueTogether(
            name='imagelabel',
            unique_together={('image', 'language', 'dialect')},
        ),
        migrations.AlterUniqueTogether(
            name='outfitsetitem',
            unique_together={('set', 'item')},
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['item', 'rating'], name='review_item_rating'),
        ),
        migrations.AlterUniqueTogether(
            name='securityconsent',
            unique_together={('user', 'consent_type', 'date_given')},
        ),
        migrations.AlterUniqueTogether(
            name='subcategory',
            unique_together={('category', 'name')},
        ),
        migrations.AlterUniqueTogether(
            name='itemsubstyle',
            unique_together={('item', 'substyle')},
        ),
        migrations.AlterUniqueTogether(
            name='brandsubstyle',
            unique_together={('brand', 'substyle')},
        ),
        migrations.AlterUniqueTogether(
            name='itemtag',
            unique_together={('item', 'tag')},
        ),
        migrations.AlterUniqueTogether(
            name='tagtranslation',
            unique_together={('tag', 'language')},
        ),
        migrations.AlterUniqueTogether(
            name='userfollow',
            unique_together={('follower', 'followed')},
        ),
    ]
